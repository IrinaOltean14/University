; 14.  Determine the list of nodes accesed in postorder in a tree of type (1).

(defun parcurg_st (l n m)
    (cond
        ((null l) nil)
        ((= n (+ m 1)) nil)
        (t (cons (car l) (cons (cadr l) (parcurg_st (cddr l) (+ n 1) (+ m (cadr l))))))
    )
)

(defun stang (l)
    (parcurg_st (cddr l) 0 0)
)

(defun parcurg_dr (l n m)
    (cond
        ((null l) nil)
        ((= n (+ m 1)) l)
        (t (parcurg_dr (cddr l) (+ n 1) (+ m (cadr l))))
    )
)

(defun drept (l)
    (parcurg_dr (cddr l) 0 0)
)


(defun my_append (l1 l2)
    (cond
        ((null l1) l2)
        (t (cons (car l1) (my_append (cdr l1) l2)))
    )
)

; postorder(l1...ln) = nil, if n = 0
; = postorder(stang(l)) + postorder(drept(l)) + l1

(defun postorder (l)
    (cond
        ((null l) nil)
        (t (my_append (my_append (postorder (stang l)) (postorder (drept l))) (list (car l))))
     )
)

(print (postorder '(A 2 B 0 C 2 D 0 E 0) ))











