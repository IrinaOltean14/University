; 2.  Return the list of nodes on the k-th level of a tree of type (1).

; parcurg_st(l1...ln, n, m) = nil, if l is null
; = nil, if n = m + 1
; = l1 + l2 + parcurg_st(l3...ln, n+1, m+l2)

(defun parcurg_st (l n m)
    (cond
        ((null l) nil)
        ((= n (+ m 1)) nil)
        (t (cons (car l) (cons (cadr l) (parcurg_st (cddr l) (+ n 1) (+ m (cadr l))))))
    )
)

(defun stang (l)
    (parcurg_st (cddr l) 0 0)
)

(defun parcurg_dr (l n m)
    (cond
        ((null l) nil)
        ((= n (+ m 1)) l)
        (t (parcurg_dr (cddr l) (+ n 1) (+ m (cadr l))))
    )
)

(defun drept (l)
    (parcurg_dr (cddr l) 0 0)
)


(defun my_append (l1 l2)
    (cond
        ((null l1) l2)
        (t (cons (car l1) (my_append (cdr l1) l2)))
    )
)


; k-level(l1...ln, k) = (l1), if k = 0
; = nil, if n = 0
; = k-level(stang(l1..ln), k-1) + k-level(drept(l1...ln), k-1), otherwise


(defun k-level(l k)
    (cond
        ((= k 0) (list (car l)))
        ((null l) nil)
        (t (my_append (k-level (stang l) (- k 1)) (k-level (drept l) (- k 1))))
    )
)

(print (k-level '(A 2 B 0 C 2 D 0 E 0) 2))