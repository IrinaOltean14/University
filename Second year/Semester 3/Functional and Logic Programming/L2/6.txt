; 6. Return the list of nodes of a tree of type (1) accessed inorder.


; parcurg_st(l1...ln, n, m) = nil, if l is null
; = nil, if n = m + 1
; = l1 + l2 + parcurg_st(l3...ln, n+1, m+l2)

(defun parcurg_st (l n m)
    (cond
        ((null l) nil)
        ((= n (+ m 1)) nil)
        (t (cons (car l) (cons (cadr l) (parcurg_st (cddr l) (+ n 1) (+ m (cadr l))))))
    )
)

(defun stang (l)
    (parcurg_st (cddr l) 0 0)
)

;(print (stang '(A 2 B 1 X 0 C 2 D 0 E 0) ))


(defun parcurg_dr (l n m)
    (cond
        ((null l) nil)
        ((= n (+ m 1)) l)
        (t (parcurg_dr (cddr l) (+ n 1) (+ m (cadr l))))
    )
)

(defun drept (l)
    (parcurg_dr (cddr l) 0 0)
)


; inorder(l1...ln) = nil, if n = 0
; = inorder(stang(l)) + l1 + inorder(drept(l))

(defun my_append (l1 l2)
    (cond
        ((null l1) l2)
        (t (cons (car l1) (my_append (cdr l1) l2)))
    )
)

(defun inorder (l)
    (cond
        ((null l) nil)
        (t (my_append (my_append (inorder (stang l)) (list (car l))) (inorder (drept l))))
    )
)


(print (inorder '(A 2 B 0 C 2 D 0 E 0) ))